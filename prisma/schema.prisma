generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academic_year {
  academic_year_id      String                  @unique @id @default(uuid()) @db.Char(36)
  academic_year         String                  @unique(map: "unique_academic_year") @db.VarChar(10)
  start_date            DateTime?               @db.Date
  end_date              DateTime?               @db.Date

  created_at            DateTime                @default(now())
  updated_at            DateTime                @default(now())

  grade_class           grade_class[]
  quarter_academic_year quarter_academic_year[]
  student_status        student_status[]
}

model biodata {
  id             String           @unique @id @default(uuid()) @db.Char(36)
  nis            Int?             @unique 
  fullname       String?          @db.VarChar(80)
  cityofbirth    String?          @db.VarChar(80)
  dateofbirth    DateTime?        @db.Date
  fathername     String?          @db.VarChar(80)
  mothername     String?          @db.VarChar(80)
  guardianname   String?          @db.VarChar(80)
  status         String?          @db.VarChar(20)
  address        String?          @db.VarChar(80)

  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())

  class_member   class_member[]
  student_status student_status[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model class_member {
  class_member_id String                  @unique @id @default(uuid()) @db.Char(36)
  class_name_id   String
  nis             Int
  student_status  String     @default("active") @db.VarChar(10)
  class_name      class_name @relation(fields: [class_name_id], references: [class_name_id], onDelete: NoAction, onUpdate: NoAction)
  biodata         biodata    @relation(fields: [nis], references: [nis], onDelete: NoAction, onUpdate: NoAction)

  @@unique([class_name_id, nis], map: "unique_class_name_id_nis")
}

model class_name {
  class_name_id    String                  @unique @id @default(uuid()) @db.Char(36)
  grade_class_id   String
  class_name       String         @db.VarChar(10)
  homeroom_teacher String         @db.VarChar(20)
  class_member     class_member[]
  grade_class      grade_class    @relation(fields: [grade_class_id], references: [grade_class_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([class_name, grade_class_id], map: "unique_class_grade")
}

model grade_class {
  grade_class_id      String                  @unique @id @default(uuid()) @db.Char(36)
  academic_year_id    String
  grade_class         String                @db.VarChar(30)
  class_name          class_name[]
  academic_year       academic_year         @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: NoAction, onUpdate: NoAction)
  subject_grade_class subject_grade_class[]

  @@unique([academic_year_id, grade_class])
}

model quarter_academic_year {
  quarter_academic_year_id String                  @unique @id @default(uuid()) @db.Char(36)
  academic_year_id         String
  quarter_academic_year    Int
  start_date               DateTime?     @db.Date
  end_date                 DateTime?     @db.Date
  academic_year            academic_year @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([academic_year_id, quarter_academic_year])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student_status {
  id               String                  @unique @id @default(uuid()) @db.Char(36)
  academic_year_id String
  nis              Int
  status_name      StudentStatus @default(active)
  academic_year    academic_year @relation(fields: [academic_year_id], references: [academic_year_id], onDelete: NoAction, onUpdate: NoAction)
  biodata          biodata       @relation(fields: [nis], references: [nis], onDelete: NoAction, onUpdate: NoAction)

  @@unique([academic_year_id, nis])
}

model subject_grade_class {
  subject_grade_class_id   String                  @unique @id @default(uuid()) @db.Char(36)
  grade_class_id           String
  subject_grade_class_name String      @db.VarChar(30)
  grade_class              grade_class @relation(fields: [grade_class_id], references: [grade_class_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([subject_grade_class_name, grade_class_id])
}

enum StudentStatus {
  active
  dropout
  graduate
}
